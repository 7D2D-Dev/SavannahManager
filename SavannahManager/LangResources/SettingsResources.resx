<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigFilePath" xml:space="preserve">
    <value>コンフィグファイルパス</value>
    <comment>メッセージ</comment>
  </data>
  <data name="Filter_ExcutableFile" xml:space="preserve">
    <value>実行可能ファイル (*.exe)|*.exe</value>
    <comment>フィルター</comment>
  </data>
  <data name="Filter_XmlFile" xml:space="preserve">
    <value>XMLファイル (*.xml)|*.xml|すべてのファイル(*.*)|*.*</value>
    <comment>フィルター</comment>
  </data>
  <data name="Help_AutoRestartIntervalTime" xml:space="preserve">
    <value>メッセージ送信を行う間隔です。</value>
  </data>
  <data name="Help_AutoRestartRebootWaitMode" xml:space="preserve">
    <value>サーバーが終了した際に起動を行うまでに待機する方法です。

1. クールタイム
Telnet接続終了後、指定した時間（クールタイム）を待機した後にスクリプト実行や起動処理を実行します。
ローカルサーバが多い場合や、SSHを利用した接続の場合に有効です。

2. プロセス待機
サーバーのプロセスの動作を確認し、終了が確認でき次第、スクリプト実行や起動処理を実行します。
待機時間を最小限にし、安全に起動処理が実行できます。
ただし、複数サーバーが動いている場合はプロセスを手動で設定する必要があります。
また、SSH環境では使用できません。</value>
  </data>
  <data name="Help_AutoRestartStartTime" xml:space="preserve">
    <value>再起動の残り時間が指定した時間になるとメッセージを送信します。</value>
  </data>
  <data name="Help_BackupRestorePath" xml:space="preserve">
    <value>復元する際のディレクトリパスです。
空の場合は「%AppData%\7DaysToDie」が復元先として使用されます。</value>
  </data>
  <data name="Help_BetaMode" xml:space="preserve">
    <value>ベータモードでは開発中の機能を使用することができます。
正式に実装する保証はなければ、動作保証もできないので使用には注意してください。</value>
  </data>
  <data name="Help_ScheduledTime" xml:space="preserve">
    <value>このオプションで指定した時間が経過するとサーバーの再起動を行います。</value>
  </data>
  <data name="Help_TelnetWaitTime" xml:space="preserve">
    <value>このオプションで指定した時間だけログ出力を停止させます。
Get Timeなどのコンソールログに出力しないで解析する機能でログ出力されてしまう問題を解決します。
取得できた段階でログ出力を再開させますが、短すぎると処理する前にログ出力されてしまいます。ネットワーク環境に合わせて設定しましょう。
ローカル環境であれば通常は2000ミリ秒 (2秒) あれば十分なはずです。</value>
  </data>
  <data name="Input_Some_Value" xml:space="preserve">
    <value>値を入力してください。</value>
  </data>
  <data name="ServerFilePath" xml:space="preserve">
    <value>サーバーファイルパス</value>
    <comment>メッセージ</comment>
  </data>
  <data name="UI_AdminFilePathLabel" xml:space="preserve">
    <value>アドミンファイルパス</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_AutoCheckUpdLabel" xml:space="preserve">
    <value>自動でアップデートをチェックする</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_BackupDestinationPath" xml:space="preserve">
    <value>バックアップ保存先のパス</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_BetaModeEnabledLabel" xml:space="preserve">
    <value>ベータモードの有効化</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_BetaModeLabel" xml:space="preserve">
    <value>ベータモード</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_CancelBT" xml:space="preserve">
    <value>キャンセル</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_ConfigFilePathLabel" xml:space="preserve">
    <value>コンフィグファイルパス</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_EnabledRestartMessage" xml:space="preserve">
    <value>再起動時にチャットメッセージを送信する</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_Encryption" xml:space="preserve">
    <value>暗号化</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_EncryptPassword" xml:space="preserve">
    <value>パスワードを暗号化</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_GeneralLabel" xml:space="preserve">
    <value>全般</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_Hour" xml:space="preserve">
    <value>時間</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_IntervalTime" xml:space="preserve">
    <value>送信間隔</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_KeyConfigLabel" xml:space="preserve">
    <value>キー</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_KeyEditBTLabel" xml:space="preserve">
    <value>キー編集</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_LogGetterEnabledLabel" xml:space="preserve">
    <value>ログ取得の有効化</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_LogLabel" xml:space="preserve">
    <value>ログ</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_LogLength" xml:space="preserve">
    <value>コンソールテキストの長さ</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_MessageFormat" xml:space="preserve">
    <value>チャット形式</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_Minute" xml:space="preserve">
    <value>分</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_OthersLabel" xml:space="preserve">
    <value>その他</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_RebootWaitMode" xml:space="preserve">
    <value>再起動待機モード</value>
  </data>
  <data name="UI_ResetPassword" xml:space="preserve">
    <value>パスワードをリセット</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_Restart" xml:space="preserve">
    <value>自動再起動</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_RestoreDestinationPath" xml:space="preserve">
    <value>復元先のパス</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_SaveBT" xml:space="preserve">
    <value>保存</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_ScheduledTime" xml:space="preserve">
    <value>予約時間</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_Second" xml:space="preserve">
    <value>秒</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_ServerFilePathLabel" xml:space="preserve">
    <value>サーバーファイルパス</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_SettingsNameLabel" xml:space="preserve">
    <value>設定</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_ShortcutKeyLabel" xml:space="preserve">
    <value>ショートカットキー</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_StartTime" xml:space="preserve">
    <value>開始時間</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_TextLength" xml:space="preserve">
    <value>文字</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="UI_UpdateLabel" xml:space="preserve">
    <value>アップデート</value>
    <comment>UI, 設定</comment>
  </data>
  <data name="_0_is_Empty" xml:space="preserve">
    <value>{0}が空です。</value>
    <comment>メッセージ</comment>
  </data>
</root>