<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigFilePath" xml:space="preserve">
    <value>Config File Path</value>
    <comment>Message</comment>
  </data>
  <data name="Filter_ExcutableFile" xml:space="preserve">
    <value>Excutable Files (*.exe)|*.exe</value>
    <comment>Filter</comment>
  </data>
  <data name="Filter_XmlFile" xml:space="preserve">
    <value>XML Files (*.xml)|*.xml|All Files(*.*)|*.*</value>
    <comment>Filter</comment>
  </data>
  <data name="Help_AutoRestartIntervalTime" xml:space="preserve">
    <value>The interval at which messages are sent.</value>
  </data>
  <data name="Help_AutoRestartRebootWaitMode" xml:space="preserve">
    <value>How to wait for the server to start up when it terminates.

1. Cool Time
After the Telnet connection is terminated, the startup process is executed after waiting for the specified time (cool time).
This is effective when there are many local servers or when SSH is used for connection. 

2. Wait Process
Check the operation of the server process and execute the startup process as soon as it is confirmed to be finished.
This minimizes the waiting time and safely executes the startup process.
However, the process must be configured manually if multiple servers are running.
Also, it cannot be used in an SSH environment.</value>
  </data>
  <data name="Help_AutoRestartStartTime" xml:space="preserve">
    <value>The system starts sending messages when the time remaining for the restart reaches the specified time.</value>
  </data>
  <data name="Help_BackupRestorePath" xml:space="preserve">
    <value>The directory path for restoring.
It will be expanded to "%AppData%\7DaysToDie" if the path is empty.</value>
  </data>
  <data name="Help_BetaMode" xml:space="preserve">
    <value>In beta mode, you can use features that are still under development.
There is no guarantee that they will be formally implemented, nor can they be guaranteed to work, so please be careful when using them.</value>
  </data>
  <data name="Help_ScheduledTime" xml:space="preserve">
    <value>The server will restart after the time specified in this option has elapsed.</value>
  </data>
  <data name="Help_TelnetWaitTime" xml:space="preserve">
    <value>This option will stop the log output for the specified time.
You can solve the problem of log output by using Get Time or other functions that analyze without outputting to the console log.
If the time is too short, the log will be output before it is processed. Set it according to your network environment.
In a local environment, 2000 milliseconds (2 seconds) should usually be enough.</value>
  </data>
  <data name="Input_Some_Value" xml:space="preserve">
    <value>Please enter a value.</value>
  </data>
  <data name="ServerFilePath" xml:space="preserve">
    <value>Server File Path</value>
    <comment>Message</comment>
  </data>
  <data name="UI_AdminFilePathLabel" xml:space="preserve">
    <value>Admin File Path</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_AutoCheckUpdLabel" xml:space="preserve">
    <value>Check automatically updates</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_BackupDestinationPath" xml:space="preserve">
    <value>Backup Destination Path</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_BetaModeEnabledLabel" xml:space="preserve">
    <value>Enable Betamode</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_BetaModeLabel" xml:space="preserve">
    <value>Beta Mode</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_CancelBT" xml:space="preserve">
    <value>Cancel</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_ConfigFilePathLabel" xml:space="preserve">
    <value>Config File Path</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_EnabledRestartMessage" xml:space="preserve">
    <value>Send message when the server restart time is approaching</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_Encryption" xml:space="preserve">
    <value>Encryption</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_EncryptPassword" xml:space="preserve">
    <value>Encrypt Password</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_GeneralLabel" xml:space="preserve">
    <value>General</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_Hour" xml:space="preserve">
    <value>Hour</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_IntervalTime" xml:space="preserve">
    <value>Interval Time</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_KeyConfigLabel" xml:space="preserve">
    <value>Key</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_KeyEditBTLabel" xml:space="preserve">
    <value>Edit Key</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_LogGetterEnabledLabel" xml:space="preserve">
    <value>Enable Outputing logs</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_LogLabel" xml:space="preserve">
    <value>Log</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_LogLength" xml:space="preserve">
    <value>Length of Console Text</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_MessageFormat" xml:space="preserve">
    <value>Message Format</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_Minute" xml:space="preserve">
    <value>Minute</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_OthersLabel" xml:space="preserve">
    <value>Others</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_RebootWaitMode" xml:space="preserve">
    <value>Reboot Wait Mode</value>
  </data>
  <data name="UI_ResetPassword" xml:space="preserve">
    <value>Reset Password</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_Restart" xml:space="preserve">
    <value>Restart</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_RestoreDestinationPath" xml:space="preserve">
    <value>Restore Destination Path</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_SaveBT" xml:space="preserve">
    <value>Save</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_ScheduledTime" xml:space="preserve">
    <value>Scheduled Time</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_Second" xml:space="preserve">
    <value>Second</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_ServerFilePathLabel" xml:space="preserve">
    <value>Server File Path</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_SettingsNameLabel" xml:space="preserve">
    <value>Settings</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_ShortcutKeyLabel" xml:space="preserve">
    <value>Shortcut Key</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_StartTime" xml:space="preserve">
    <value>Start Time</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_TextLength" xml:space="preserve">
    <value>Characters</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="UI_UpdateLabel" xml:space="preserve">
    <value>Update</value>
    <comment>UI, Setting</comment>
  </data>
  <data name="_0_is_Empty" xml:space="preserve">
    <value>{0} is empty.</value>
    <comment>Message</comment>
  </data>
</root>