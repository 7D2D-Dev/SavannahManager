<Window x:Class="_7dtd_XmlEditor.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:_7dtd_XmlEditor"
        xmlns:CommonViews="clr-namespace:CommonStyleLib.Views;assembly=CommonStyleLib"
        xmlns:treeView="clr-namespace:_7dtd_XmlEditor.Models.TreeView"
        xmlns:views="clr-namespace:_7dtd_XmlEditor.Views"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="{x:Static SystemParameters.CaptionHeight}"
                      ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"
                      UseAeroCaptionButtons="False" />
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/CommonStyleLib;component/Styles/Icon.xaml" />
                <ResourceDictionary Source="pack://application:,,,/CommonStyleLib;component/Styles/Main.xaml" />
                <ResourceDictionary Source="/Styles/TreeViewStyle.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Grid Style="{DynamicResource ResourceKey=BackgroundGrid}">
        <Border Name="AroundBorder" BorderBrush="{Binding AroundBorderColor.Value}" Opacity="{Binding AroundBorderOpacity.Value}" BorderThickness="1" />

        <Grid Margin="{Binding MainWindowMargin}">

            <StackPanel Orientation="Horizontal" Margin="5,0,0,0"
                        HorizontalAlignment="left"
                        VerticalAlignment="Top">
                <Image Source="{StaticResource Icon}" Width="15" Height="15" Stretch="Uniform" WindowChrome.IsHitTestVisibleInChrome="True">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <CommonViews:InteractiveCommand Command="{Binding ImageMouseDown}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Image>
                <Label Content="Savannah Xml Editor" Style="{DynamicResource ResourceKey=StatTitle}" />
                <Label Content="{Binding IsEditedTitle.Value}" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="5"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top">
                <Button Name="MainWindowMinimumBt" Content="{Binding MainWindowMinimumBtContent}" Style="{DynamicResource CaptionButtonStyleKey}" Command="{Binding MainWindowMinimumBtClick}" />
                <Button Name="MainMaximumBt" Content="{Binding MainWindowMaximumBtContent}" Style="{DynamicResource CaptionButtonStyleKey}" Command="{Binding MainWindowMaximumBtClick}" />
                <Button Name="MainWindowCloseBt" Content="{Binding MainWindowCloseBtContent}" Style="{DynamicResource CaptionButtonStyleKey}" Command="{Binding MainWindowCloseBtClick}" />
            </StackPanel>
            <StackPanel Margin="1,25,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Menu IsMainMenu="True" Name="Menu" Height="25" Padding="3" VerticalAlignment="Top">
                    <MenuItem Header="File(_F)">
                        <MenuItem Header="New(_N)" Command="{Binding FileNewBtClick}" />
                        <MenuItem Header="Open(_O)" Command="{Binding FileOpenBtClick}" />
                        <Separator Style="{DynamicResource MLB_Separator}" />
                        <MenuItem Header="Save(_S)" Command="{Binding FileSaveBtClick}" />
                        <MenuItem Header="Save As(_A)" Command="{Binding FileSaveAsBtClick}" />
                        <Separator Style="{DynamicResource MLB_Separator}" />
                        <MenuItem Header="Exit(_X)" Command="{Binding MainWindowCloseBtClick}" />
                    </MenuItem>
                </Menu>
            </StackPanel>

            <Grid Margin="10,55,10,10">

                <Grid.RowDefinitions>
                    <RowDefinition Height="0" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width=".5*" />
                        <ColumnDefinition Width="5" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>

                    <views:BindableSelectedItemTreeView x:Name="ItemTreeView" ItemsSource="{Binding TreeViewItems}" BindableSelectedItem="{Binding TreeViewSelectedItem.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IgnoreNullSelectedItem="False" ScrollViewer.HorizontalScrollBarVisibility="Visible" ScrollViewer.VerticalScrollBarVisibility="Visible">
                        <i:Interaction.Behaviors>
                            <views:MoveableTreeViewBehavior DropCommand="{Binding DropCommand}" DataType="treeView:TreeViewItemInfo" />
                        </i:Interaction.Behaviors>

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseRightButtonDown">
                                <i:InvokeCommandAction Command="{Binding TreeViewMouseRightButtonDown}" />
                            </i:EventTrigger>
                            <i:EventTrigger EventName="SelectedItemChanged">
                                <i:InvokeCommandAction  Command="{Binding TreeViewSelectedItemChangedCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>


                        <views:BindableSelectedItemTreeView.ItemTemplate>
                            <HierarchicalDataTemplate DataType="treeView:TreeViewItemInfo" ItemsSource="{Binding Children}">
                                <Grid Background="{Binding Background}">
                                    <StackPanel>
                                        <Separator BorderThickness="1" BorderBrush="White" Visibility="{Binding BeforeSeparatorVisibility}" />
                                        <TextBlock Text="{Binding Name}" MinWidth="60" Visibility="{Binding TextBlockVisibility}" />
                                        <Separator BorderThickness="1" BorderBrush="White" Visibility="{Binding AfterSeparatorVisibility}" />
                                    </StackPanel>
                                    <TextBox Text="{Binding TagName}" Visibility="{Binding TextBoxVisibility}" MinWidth="100" views:FocusExtension.IsFocused="{Binding IsTextBoxFocus}">
                                        <TextBox.Resources>
                                            <Style TargetType="TextBox">
                                                <Setter Property="Foreground" Value="white" />
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                                            <Border Name="TextBoxBorder" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderThickness="1" BorderBrush="Transparent">
                                                                <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                                                    <Setter TargetName="TextBoxBorder" Property="BorderBrush" Value="LightGray" />
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </TextBox.Resources>

                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="LostFocus">
                                                <i:InvokeCommandAction Command="{Binding TextBoxLostFocus}" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                </Grid>
                            </HierarchicalDataTemplate>
                        </views:BindableSelectedItemTreeView.ItemTemplate>

                        <views:BindableSelectedItemTreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Style.Resources>
                                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                                         Color="#4090ff" />
                                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
                                         Color="#4090ff" />
                                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                                         Color="#444" />
                                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}"
                                         Color="#444" />
                                </Style.Resources>
                                <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
                                <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded,Mode=TwoWay}"/>
                                <Setter Property="Foreground" Value="White" />
                                <Setter Property="FontWeight" Value="Normal" />
                                <Style.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Foreground" Value="White" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </views:BindableSelectedItemTreeView.ItemContainerStyle>

                        <views:BindableSelectedItemTreeView.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Change TagName" IsEnabled="{Binding ContextMenuEnabled.Value}" Command="{Binding ChangeTagNameCommand}" />
                                <Separator Style="{DynamicResource MLB_Separator}" />
                                <MenuItem Header="Add child element" IsEnabled="{Binding ContextMenuEnabled.Value}" Command="{Binding AddChildElementCommand}" />
                                <MenuItem Header="Remove element" IsEnabled="{Binding AddElementEnabled.Value}" Command="{Binding RemoveElementCommand}" />
                            </ContextMenu>
                        </views:BindableSelectedItemTreeView.ContextMenu>
                    </views:BindableSelectedItemTreeView>

                    <GridSplitter Grid.Column="1" HorizontalAlignment="Center" Background="Transparent" Width="5" Margin="0,0,0,0"/>

                    <Grid Grid.Column="2">

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                            <RowDefinition Height="5" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <!--<Button Content="Apply" Style="{DynamicResource FlatButton}" Command="{Binding ApplyBtClicked}" />-->

                        <Label Grid.Row="0" Content="{Binding FullPath.Value}" />

                        <Grid Grid.Row="1">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="30" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <StackPanel HorizontalAlignment="Left" IsEnabled="{Binding IsAttributesEnabled.Value}">
                                <Button Content="+" Width="25" Height="25" Style="{DynamicResource FlatButton}" Command="{Binding AddAttributeBtClicked}" />
                                <Button Content="-" Width="25" Height="25" Margin="0,5,0,0" Style="{DynamicResource FlatButton}" Command="{Binding RemoveAttributeBtClicked}" />
                            </StackPanel>

                            <ListView Grid.Column="1" ItemsSource="{Binding Attributes}" IsEnabled="{Binding IsAttributesEnabled.Value}">

                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding AttributesSelectionChanged}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=SelectedItem}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>

                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="150" Header="Name">
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding Attribute.Name}" TextWrapping="Wrap">
                                                        <i:Interaction.Triggers>
                                                            <i:EventTrigger EventName="LostFocus">
                                                                <i:InvokeCommandAction Command="{Binding AttributeNameLostFocus}" />
                                                            </i:EventTrigger>
                                                            <i:EventTrigger EventName="TextChanged">
                                                                <i:InvokeCommandAction Command="{Binding AttributeNameTextChanged}" />
                                                            </i:EventTrigger>
                                                        </i:Interaction.Triggers>
                                                    </TextBox>
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        <GridViewColumn Width="300" Header="Value">
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding Attribute.Value}" TextWrapping="Wrap">
                                                        <i:Interaction.Triggers>
                                                            <i:EventTrigger EventName="LostFocus">
                                                                <i:InvokeCommandAction Command="{Binding AttributeNameLostFocus}" />
                                                            </i:EventTrigger>
                                                            <i:EventTrigger EventName="TextChanged">
                                                                <i:InvokeCommandAction Command="{Binding AttributeNameTextChanged}" />
                                                            </i:EventTrigger>
                                                        </i:Interaction.Triggers>
                                                    </TextBox>
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>

                                <ListView.Resources>
                                    <Style x:Key="{x:Type TextBox}" TargetType="TextBox">
                                        <Setter Property="Foreground" Value="white" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                                    <Border Name="TextBoxBorder" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderThickness="1" BorderBrush="Transparent">
                                                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                                            <Setter TargetName="TextBoxBorder" Property="BorderBrush" Value="LightGray" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ListView.Resources>

                                <ListView.ItemContainerStyle>
                                    <Style TargetType="ListViewItem">
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="Foreground" Value="White" />
                                        <Setter Property="FontFamily" Value="{StaticResource FontName}" />
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                    <Border
                         BorderBrush="Transparent"
                         BorderThickness="0"
                         Background="{TemplateBinding Background}">
                                                        <GridViewRowPresenter HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto" Margin="3" Content="{TemplateBinding Content}"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsSelected" Value="true" />
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="#4090ff" />
                                            </MultiTrigger>
                                            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                                                <Setter Property="IsSelected" Value="true" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="#333"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ListView.ItemContainerStyle>
                            </ListView>
                        </Grid>

                        <GridSplitter Background="Transparent" Grid.Row="2" Margin="0,0,0,0" HorizontalAlignment="Stretch" Height="Auto"/>

                        <TextBox Grid.Row="3" AcceptsReturn="True" TextWrapping="Wrap" Text="{Binding InnerXml.Value, UpdateSourceTrigger=PropertyChanged}" VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Visible">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="LostFocus">
                                    <i:InvokeCommandAction Command="{Binding InnerXmlLostFocus}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="TextChanged">
                                    <i:InvokeCommandAction Command="{Binding InnerXmlTextChanged}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>
                    </Grid>

                </Grid>

            </Grid>
        </Grid>
    </Grid>
</Window>
